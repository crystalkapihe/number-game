<?php
namespace App\Controller;

use App\Controller\AppController;
use Cake\Core\Configure;
use Phinx\Config\Config;

/**
 * Numbers Controller
 *
 * @property \App\Model\Table\NumbersTable $Numbers
 */
class NumbersController extends AppController
{
    public function isAuthorized($user)
    {
        if (!Configure::read('debug') && $this->request->action === 'view') {
            return false;
        }
    }

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadComponent('Factors');
    }

    /**
     * Index method
     *
     * @return \Cake\Network\Response|null
     */
    public function index()
    {
        $this->paginate = [
            'contain' => ['Users']
        ];
        $numbers = $this->paginate($this->Numbers);

        $this->set(compact('numbers'));
        $this->set('_serialize', ['numbers']);
    }

    /**
     * View method
     *
     * @param string|null $id Number id.
     * @return \Cake\Network\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $number = $this->Numbers->get($id, [
            'contain' => ['Users', 'Guesses']
        ]);

        $this->set('number', $number);
        $this->set('_serialize', ['number']);
    }

    public function guess($id = null)
    {
        if ($id) {
            $number = $this->Numbers->get($id, [
                'contain' => ['Users', 'Guesses']
            ]);
        } else {
            $number = $this->Numbers->find()
                ->contain(['Users', 'Guesses'])
                ->where(['user_id' => $this->Auth->user('id')])
                ->orderDesc('Numbers.created')
                ->first();
        }
        $number->factors = $this->Factors->factor($number->value, false);

        foreach ($number->guesses as $key => $value) {
            $number->guesses[$key]->result = $this->Factors->compare($number->value, $value->value)[1];
        }
        $this->set('number', $number);
        $this->set('maxVal', Configure::read('gameLevels')[$number->difficulty]);
        $this->set('_serialize', ['number']);
    }

    /**
     * Add method
     *
     * @return \Cake\Network\Response|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $number = $this->Numbers->newEntity();
        if ($this->request->is('post')) {
            $difficulty = $this->request->data['difficulty'];
            $data = [
                'guess_count' => 0,
                'difficulty' => $difficulty,
                'user_id' => $this->Auth->user('id'),
                'value' => rand(2, Configure::read('gameLevels')[$difficulty])
            ];
            $number = $this->Numbers->patchEntity($number, $data);
            if ($this->Numbers->save($number)) {
                $this->Flash->success(__('A new game has been created'));

                return $this->redirect(['action' => 'guess']);
            } else {
                $this->Flash->error(__('The number could not be saved. Please, try again.'));
            }
        }
        $users = $this->Numbers->Users->find('list', ['limit' => 200]);
        $this->set(compact('number', 'users'));
        $this->set('_serialize', ['number']);
    }

}
